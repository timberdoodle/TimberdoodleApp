package de.tudarmstadt.adtn.groupciphersuitetests.utils;

import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

/**
 * Faulty vectors
 */
public class FaultyVectors {

    public static int vecCount = 4;

    public static byte[][] ChaChakeys = {
            {(byte) 0x31, (byte) 0xea, (byte) 0xfc, (byte) 0x3d, (byte) 0x12, (byte) 0x36, (byte) 0x6f, (byte) 0x9f,
                    (byte) 0x41, (byte) 0xcf, 0x4b, (byte) 0x81, 0x02, (byte) 0x9c, (byte) 0xf2, (byte) 0xfa,
                    (byte) 0xfa, (byte) 0xb1, 0x59, (byte) 0xa2, (byte) 0xaa, (byte) 0xb0, 0x46, (byte) 0xc1,
                    (byte) 0x41, (byte) 0xb8, (byte) 0x93, 0x33, (byte) 0xd1, (byte) 0x90},

            {(byte) 0xb0, (byte) 0x97, (byte) 0xda, (byte) 0xe0, (byte) 0xe8, (byte) 0xd1, (byte) 0x8a, (byte) 0xc6,
                    0x49, 0x6b, (byte) 0xd8, (byte) 0xcb, (byte) 0x9a, (byte) 0xac, (byte) 0xa3, (byte) 0x97,
                    (byte) 0xa0, (byte) 0xaf, (byte) 0xf1, (byte) 0xb0, (byte) 0xf7, (byte) 0xfe, 0x7c, (byte) 0xc0,
                    0x30, (byte) 0xfe, 0x20, 0x1f, 0x28, (byte) 0xd6, 0x30, 0x24},

            {(byte) 0xc0, 0x2e, 0x5f, (byte) 0xb1, 0x45, (byte) 0xd1, (byte) 0xb0, (byte) 0x90,
                    (byte) 0xd6, (byte) 0xcf, (byte) 0xa6, 0x57, (byte) 0x88, 0x5f, (byte) 0xfe, 0x52,
                    (byte) 0xaa, (byte) 0xeb, 0x3d, 0x44, (byte) 0xfe, 0x65, (byte) 0xe7, (byte) 0xec,
                    (byte) 0xa1, 0x61, (byte) 0xb2, (byte) 0xa6, (byte) 0x91, 0x7c, 0x51, 0x47},

            {0x4a, 0x4e, 0x49, 0x44, (byte) 0xf2, (byte) 0xbe, (byte) 0x86, (byte) 0x87,
                    0x58, (byte) 0xb3, 0x05, 0x16, 0x7e, (byte) 0x9a, 0x5e, (byte) 0x81,
                    0x34, (byte) 0x97, 0x5b, 0x59, (byte) 0xc6, (byte) 0xc3, 0x40, 0x5b,
                    0x1b, (byte) 0xa9, 0x7c, (byte) 0xf6, (byte) 0xaa, (byte) 0xad, 0x9}
    };

    public static byte[][] Polykeys = {
            {(byte) 0x2e, (byte) 0x16, (byte) 0xbe, (byte) 0xc9, (byte) 0x2e, (byte) 0x48, (byte) 0x5e, (byte) 0x53,
                    (byte) 0x49, (byte) 0xe1, (byte) 0x72, (byte) 0xbc, (byte) 0xc2, (byte) 0x49, (byte) 0x44, (byte) 0x83,
                    (byte) 0x9b, (byte) 0x06, (byte) 0x88, (byte) 0x9e, (byte) 0xd8, (byte) 0x40, (byte) 0x38, (byte) 0x64,
                    (byte) 0x62, (byte) 0x4d, (byte) 0x45, (byte) 0xcf},

            {(byte) 0xf7, (byte) 0xfd, (byte) 0xf4, (byte) 0xd0, (byte) 0xfe, (byte) 0x90, (byte) 0x6d, (byte) 0xa2,
                    (byte) 0xcd, (byte) 0xd7, (byte) 0x35, (byte) 0x4a, (byte) 0x1c, (byte) 0xd8, (byte) 0xf0, (byte) 0x59,
                    (byte) 0x1c, (byte) 0xea, (byte) 0x6d, (byte) 0x68, (byte) 0x4b, (byte) 0x85, (byte) 0xb1, (byte) 0x82,
                    (byte) 0x0a, (byte) 0x5d, (byte) 0x78, (byte) 0xf8, (byte) 0xdd, (byte) 0xe},

            {(byte) 0x6c, (byte) 0x3b, (byte) 0x5e, (byte) 0x13, (byte) 0xb6, (byte) 0x7e, (byte) 0xa9, (byte) 0xb6,
                    (byte) 0x1c, (byte) 0x6f, (byte) 0x57, (byte) 0xd0, (byte) 0xbf, (byte) 0xb0, (byte) 0xd8, (byte) 0x7a,
                    (byte) 0x19, (byte) 0xd6, (byte) 0x75, (byte) 0x82, (byte) 0x5c, (byte) 0xcd, (byte) 0xd4, (byte) 0x34,
                    (byte) 0xc9, (byte) 0xb8, (byte) 0x53, (byte) 0x4d},

            {(byte) 0x11, (byte) 0x30, (byte) 0x06, (byte) 0x2e, (byte) 0xd8, (byte) 0xbf, (byte) 0x4c, (byte) 0xc1,
                    (byte) 0xc5, (byte) 0x36, (byte) 0x89, (byte) 0x52, (byte) 0xbb, (byte) 0xab, (byte) 0x9d, (byte) 0xef,
                    (byte) 0xec, (byte) 0x50, (byte) 0x8c, (byte) 0xc6, (byte) 0xae, (byte) 0xbb, (byte) 0x84, (byte) 0x66,
                    (byte) 0x42, (byte) 0x9a, (byte) 0xc4, (byte) 0xda, (byte) 0x6e}
    };

    public static byte[][] nonces = {
            {(byte) 0x18, (byte) 0xee, (byte) 0x87, (byte) 0x07, (byte) 0x7b, (byte) 0x83, (byte) 0xb6, (byte) 0x2e,
                    (byte) 0xd3, (byte) 0x59, (byte) 0xdf, (byte) 0xe4, (byte) 0x9b, (byte) 0x03, (byte) 0xba, (byte) 0xa3},

            {(byte) 0x1e, (byte) 0x3b, (byte) 0x2c, (byte) 0xb7, (byte) 0x31, (byte) 0x22, (byte) 0x33, (byte) 0xc8,
                    (byte) 0xf1, (byte) 0xa7, (byte) 0x92, (byte) 0x55, (byte) 0xdf, (byte) 0x51, (byte) 0x7b, (byte) 0xfb},

            {(byte) 0xb9, (byte) 0x9b, (byte) 0x13, (byte) 0xb3, (byte) 0xc8, (byte) 0x47, (byte) 0xfe, (byte) 0xac,
                    (byte) 0xef, (byte) 0x45, (byte) 0xbf, (byte) 0xa1, (byte) 0x54, (byte) 0x95, (byte) 0x68, (byte) 0x84},

            {(byte) 0xba, (byte) 0xc8, (byte) 0x6e, (byte) 0x1a, (byte) 0x86, (byte) 0x97, (byte) 0x66, (byte) 0x7d,
                    (byte) 0xcf, (byte) 0x9e, (byte) 0x18, (byte) 0x2e, (byte) 0xb3, (byte) 0xac, (byte) 0x6c, (byte) 0x5b}
    };

    public static byte[][] halfNonces = {
            {(byte) 0x18, (byte) 0xee, (byte) 0x87, (byte) 0x07, (byte) 0x7b, (byte) 0x83, (byte) 0xb6, (byte) 0x2e},
            {(byte) 0x1e, (byte) 0x3b, (byte) 0x2c, (byte) 0xb7, (byte) 0x31, (byte) 0x22, (byte) 0x33, (byte) 0xc8},
            {(byte) 0xb9, (byte) 0x9b, (byte) 0x13, (byte) 0xb3, (byte) 0xc8, (byte) 0x47, (byte) 0xfe, (byte) 0xac},
            {(byte) 0xba, (byte) 0xc8, (byte) 0x6e, (byte) 0x1a, (byte) 0x86, (byte) 0x97, (byte) 0x66, (byte) 0x7d}
    };

    public static SecretKey[] cipherKeys = {
            new SecretKeySpec(ChaChakeys[0], CipherSuiteTestsUtility.cipherAlgorithm),
            new SecretKeySpec(ChaChakeys[1], CipherSuiteTestsUtility.cipherAlgorithm),
            new SecretKeySpec(ChaChakeys[2], CipherSuiteTestsUtility.cipherAlgorithm),
            new SecretKeySpec(ChaChakeys[3], CipherSuiteTestsUtility.cipherAlgorithm)
    };

    public static SecretKey[] macKeys = {
            new SecretKeySpec(Polykeys[0], CipherSuiteTestsUtility.macAlgorithm),
            new SecretKeySpec(Polykeys[1], CipherSuiteTestsUtility.macAlgorithm),
            new SecretKeySpec(Polykeys[2], CipherSuiteTestsUtility.macAlgorithm),
            new SecretKeySpec(Polykeys[3], CipherSuiteTestsUtility.macAlgorithm)
    };

    public static byte[][] failureKeys = {
            {94, 24, -86, 39, -116, 81, -18, 81, 15, -88, 83, 13, 21, -45, 38, 65, 8, 74, -67, 16, 103, 125, 94, -14, 31, -79, -114, 97, -39, 100, -46, -89},
            {-23, 107, 78, -10, 51, -116, 87, 37, 80, 52, 4, 6, -36, -26, 103, -71, -84, 48, 87, 0, -124, 1, 106, 1, 92, 44, 20, 10, 96, -45, -84, 13}
    };

    public static byte[] nonce = {-57, 75, -31, -25, 110, -103, 116, -9, -53, 34, 16, 4, 96, -22, -57, 111};

    public static byte[] halfnonce = {-57, 75, -31, -25, 110, -103, 116, -9};

    public static byte[] mac = {-28, 61, 15, -44, 40, 10, -2, -63, -51, 70, 79, -37, -47, -38, 86, -3};

    public static byte[] cipher = {8, 41, 101, 110, -63, -82, 50, -128, 88, -73, 58, 98, -102, -65, 19, -65, 99, 33, 30, 84, 96, 100, -128, 98, -86, 62, 102, -51, 116, 81, -53, -75, 18, -19, 107, -117, 55, -120, -115, 64, 57, 106, -33, 116, 94, -67, 73, -70, 119, 55, 92, 31, 72, 71, 86, 113, 110, -120, -45, -114, -63, 49, 8, 24, 76, 93, 10, -97, 126, 32, -42, 6, -108, 21, -64, -128, -63, -56, -63, 126, -115, 38, 126, -122, 21, 30, 125, -81, -88, -116, -64, 107, 124, 76, 11, 42, 112, 84, -7, 77, -41, 107, 30, 65, -109, -115, -36, 99, -128, -31, 22, -76, 40, -40, 19, 1, -25, 62, 43, -96, -106, -25, -95, -114, -94, -21, -45, 105, 25, 80, -66, -126, -16, -76, 85, 71, -125, 101, 16, -47, -82, 88, -47, -10, -26, -128, 22, -28, 125, -60, 26, -103, -54, -128, -85, -97, 88, 82, -12, 63, -68, 9, 11, 42, 78, -114, -63, 86, 107, 20, 9, 114, 73, -68, 103, 62, -55, -22, -21, 110, 47, 95, -32, 10, -12, -44, -82, -1, -36, 16, 75, -111, -115, 49, -111, -8, 88, 54, 24, 94, -5, 77, -34, 96, -45, 5, -74, 77, -76, 12, 74, -39, -99, -34, 78, -71, 26, 57, -86, -94, -48, -69, 55, 66, 87, 110, -47, 11, 103, -121, -108, -86, -30, -126, 2, 88, -94, 38, -4, -49, 77, -23, -68, 55, 127, 90, 7, 112, 47, 118, -7, 97, -59, 98, -75, 8, -8, 68, -1, -117, -88, 35, 93, 65, -100, 101, 19, -83, 68, 30, 88, 2, 117, 61, -123, 77, 22, -21, 84, 33, 37, -32, -14, 118, -32, -118, -35, 38, 15, -7, -89, -81, -102, -21, -8, -51, 79, -44, -35, -94, -22, 111, -55, 76, -125, -73, 117, -16, 64, -56, -17, 69, 50, -23, -38, -2, 83, 81, 84, -65, 101, -15, 54, 101, -84, -54, 97, -80, 37, -4, 27, -120, 2, 57, -15, 26, 67, 127, -15, -59, 110, -84, 25, -92, 115, 109, -90, -78, -3, -90, 68, -95, 121, 103, -125, -12, 10, 64, -9, -18, 41, -74, -39, 36, -83, 74, -122, 84, 120, 23, 16, -52, -97, 4, 52, -112, 85, 110, -105, 62, -98, -6, -91, -59, -71, -49, -103, -83, 68, 39, 34, -54, -121, 80, 57, -46, -99, 3, -122, -7, 52, -111, -83, 49, -103, 95, 111, 43, 107, -45, -109, 18, -125, -89, -10, 50, -14, 63, 74, -64, 60, 95, -50, -41, 46, 94, -82, 61, -79, -110, -83, -69, -75, -88, 19, -126, 115, 74, -57, -35, 116, 75, 81, 108, 51, 69, -41, -37, -85, 114, -2, -126, 44, 42, -96, -34, -118, 62, -42, -48, -34, -120, -54, -56, 103, -115, -10, -116, 46, 81, 50, 20, -51, -70, -24, -11, 49, -18, -112, -46, 30, -10, 75, -6, -67, -55, -11, -104, -8, 111, -91, -99, -119, 66, 27, 58, -20, 39, -103, 53, 45, 40, -8, 103, -73, -87, -64, 49, -95, 57, -8, -77, 22, 37, -6, -83, 55, 23, -25, -104, 111, -46, 112, -66, -13, -83, 28, 48, 14, 3, -34, -97, 77, -81, 69, 75, 17, -6, 3, 13, -42, -5, 65, 56, -17, 30, 24, -25, -38, -128, -93, 64, 11, 41, 63, -26, -94, -118, -34, 99, 93, 57, -54, 13, 41, 125, -76, 58, 40, 101, -22, -103, 24, -110, -14, -84, 16, 9, 109, -98, -98, 99, 109, -9, -5, 112, -61, -72, 48, -19, 69, 125, -89, 119, -116, -74, -68, -14, -67, 14, -91, -79, -66, 94, 91, -105, 106, -111, 43, 57, -47, 79, 64, 50, -76, -127, -36, 126, -124, 127, 34, -87, -8, 73, -98, 82, -93, -59, -79, -82, -49, 25, -126, 61, -66, 76, 108, 39, -62, 56, 13, 118, 97, -26, -98, -18, 28, -32, -88, 63, 35, -110, -3, 113, 63, 0, 21, -84, 69, -60, 49, -57, 66, 35, -86, 117, -58, 106, 69, 127, -79, 55, -9, 26, 80, -64, 2, -112, -10, 109, 119, -13, 96, 118, 33, -65, -85, -26, 55, 21, 26, -91, -25, 53, -121, 126, 108, 3, 24, 117, 98, 9, 32, 84, -62, -98, -60, 111, -119, 119, -16, -105, 105, 125, 77, 47, 122, 80, 61, -2, -128, 20, -124, -73, 9, -23, -90, 63, 13, 39, 114, 63, -102, -38, -71, 25, -117, -106, -105, 116, -102, 38, -53, 33, 0, 70, -26, -58, 57, -113, -5, 115, 42, 94, 93, 68, 40, -114, -122, -60, -105, 17, 54, 62, 124, -14, -3, 40, -12, -14, 113, -5, -93, 96, 104, -77, -7, 108, -83, -79, -102, 79, 99, 11, 11, -3, -120, -102, 41, -108, -68, 48, -8, 24, -84, 11, 10, -121, 62, -121, -42, 28, 70, 4, 80, 19, -121, -11, 89, 6, 103, 120, 121, -85, -65, 63, -62, -69, -39, 57, 18, -39, 38, -54, 20, -11, 99, 62, 24, -113, 125, -31, 52, 100, 5, -21, 42, 8, 30, -88, -62, 60, -128, 86, 51, 30, -76, -113, 55, 21, -119, 104, 48, 59, -124, 7, -101, 91, -28, 14, 58, 81, 83, 74, 38, 106, 52, 54, 100, 17, -115, -94, 12, 68, -98, 83, -95, -31, 35, 71, -23, 61, 94, -72, -14, 39, 62, 100, 126, -39, 102, 109, -74, -114, -23, 93, 39, -118, 105, 104, 15, -46, -76, 64, -50, 66, 115, 5, -47, -83, 35, 78, 100, 69, -106, -21, -85, -4, -12, -32, -99, -42, 69, 72, -63, 5, -18, 97, -119, -41, -47, -60, 109, -10, 117, -83, 23, 60, -51, 106, 41, -17, 113, 73, 53, -102, 58, 6, 4, 76, 114, -79, 74, -90, 72, 23, 67, 121, 99, 46, 73, 126, -99, 96, 8, -32, 58, 106, -51, 1, -10, 40, 72, 61, 90, -46, 108, -99, 30, -48, -120, 65, -94, 44, 68, 72, 37, -80, 86, -41, -22, 25, -52, -80, 24, -11, -56, 67, -53, 101, 99, -83, 89, 105, -99, -75, 126, 95, -89, 14, -86, -64, 10, -65, 127, 88, 55, -98, 36, 62, 25, 2, -5, 91, -55, 19, -31, 30, -61, 102, -109, -19, -109, -34, 102, 111, 47, 22, -65, 28, -22, 20, 69, -84, 16, 126, -84, 53, -10, -126, -25, 110, -66, -109, -28, -45, -79, 61, 102, 21, 107, 92, -13, -29, 80, -103, -75, -16, 12, 83, 6, -27, 26, -126, -95, -92, -26, 41, -80, -79, 111, -27, -38, -46, -125, 50, -113, -64, -83, 33, 9, -103, -58, 42, -8, 76, 22, 77, -31, 34, 105, 67, 36, 51, 113, -33, 57, -51, -92, -94, -3, 84, 1, 23, 62, 32, 92, -93, 86, 86, 114, -44, 107, 113, -58, -49, 109, 52, -96, 59, -125, 120, -124, -87, -68, -81, 68, -7, -128, 38, 122, 54, 26, -5, -51, -66, -44, 54, -81, 98, 56, 17, -74, 1, -71, 13, -44, -49, -45, -23, 20, 42, -113, 120, 118, 97, 106, 62, -37, 28, -54, 118, 81, 44, -128, -3, -20, -51, -120, 102, -27, 45, 47, -16, -71, -109, 3, 6, 2, -109, 83, -47, -51, 64, 74, 13, -25, 121, -33, 38, -84, -116, -20, -28, 10, -51, 112, -108, -6, -12, 65, 47, 100, 80, -42, 86, -53, -4, 35, 80, -14, 69, -23, 17, -81, -55, 28, 57, -106, -67, -4, -30, 66, -103, 55, -69, 4, -96, 31, -29, -15, -28, -32, 29, -20, -55, -74, 122, 54, 65, -27, 121, 20, -80, 59, -70, 39, -77, 103, 46, -78, 112, 108, -1, -78, -22, -76, 52, 64, 90, -59, 52, 99, -10, -36, -125, -118, -73, -121, -96, -66, -108, -11, -77, 62, -87, -121, 44, 111, -115, -45, 62, 26, -51, 123, 57, 25, 55, 9, 73, -92, -63, -48, 90, 46, -22, 81, 112, -14, 88, 75, 73, 46, -57, 50, 69, 6, 45, 89, 90, -56, 60, 87, 114, 68, 22, -6, -93, -33, -101, 18, 116, -69, 61, 31, 60, -105, -112, -51, -1, 64, -117, -115, 54, 105, -112, -67, -121, -114, -1, 66, 69, 79, 60, -39, 111, -109, -85, 67, 71, -42, 73, -36, 65, -109, 19, -30, 68, -30, 47, 72, -99, -110, 126, -17, 77, 9, -33, 30, 29, -15, -74, 48, -18, -78, -57, 41, -23, 8, -29, 115, 38, -116, -128, 38, -13, 27, -90, 34, 55, -50, -46, 67, -125, -75, -35, -89, 16, 37, -9, -8, 79, 67, -71, 9, 41, 123, -66, -51, 60, -63, -48, 96, 31, -20, 31, 85, 117, -95, 25, -12, 10, 107, -18, -77, 110, 13, -16, 32, 94, 82, -116, -47, 85, -90, 47, -62, 58, 53, 96, 48, -30, -11, 100, -33, -82, -93, -65, -71, 94, -122, 29, 0, 68, -85, 60, -115, 123};


    public static SecretKey failureCK = new SecretKeySpec(failureKeys[0], CipherSuiteTestsUtility.cipherAlgorithm);
    public static SecretKey failureMK = new SecretKeySpec(failureKeys[1], CipherSuiteTestsUtility.macAlgorithm);

}
